void learner_init(){
    initialize_dynamic_array(&learned_rules, 2, sizeof(contextual_rule_t*));
}
/*contextual_rule_t instantiate_rule(int fn, int tag1, int tag2){
    return
}*/
void add_rule(contextual_rule_t *rule){
    add_to_dynamic_array(&learned_rules, rule);
}
void find_best_rule(corpus_t corpus){
    sorted_error_list_t *errors = error_frequencies(corpus);
    contextual_rule_t *current_rule = (contextual_rule_t*)malloc(sizeof(contextual_rule_t));
    for(int i = 0; i < errors->length; i++){
        error_t error = errors->errors[i];
        pattern_t find_patterns(corpus, error); // finds the most frequent prev and next tags
        current_rule->tag1 = error.machine_tag;
        current_rule->tag2 = error.human_tag;
        for(int ii = 0; ii < sizeof(contextual_rules); ii++){
            current_rule->triggerfn = ii;
            current_rule->arg1 = 
            current_rule->arg2 = 
        }
        int improvement = get_rule_error_improvement(corpus, *current_rule, error);
        if(i!=errors->errors[i].number-1 && improvement >= errors->errors[i+1].number){
            break;
        }
    }
    //apply_rule_to_corpus()
   // add_rule(rule)
}
/* calculates the error improved by a rule */
int get_rule_error_improvement(corpus_t corpus, contextual_rule_t rule, error_t error){
    int improvement = 0;
    int errors_created = 0;
    for(size_t i = 0; i < error.number; i++){
        int * ptr = (int*)error.indices.elems[i];
        if(check_contextual_rule(rule, corpus, *ptr))
            improvement++;
    }
    for(size_t i = 0; i < corpus.num_lines; i++){
        if(corpus.machine_tags[i] == corpus.human_tags[i] &&
           check_contextual_rule(rule, corpus, i)){
                errors_created++;
    }
    return improvement - errors_created;
}